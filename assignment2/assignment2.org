#+TITLE: Assignment 2 STL Array
#+AUTHOR: Guowei Lv
#+LATEX_CLASS: article
#+LaTeX_HEADER: \usemintedstyle{emacs}

* Header files

#+begin_src C++ :tangle Array.h

/***************************************
Class: CS251
Assignment Number: 2
Honor Pledge: I pledge that I have not recieved nor given help on this assignment.
***************************************/

/* -*- C++ -*- */

#ifndef ARRAY_H
#define ARRAY_H

// This header defines "size_t"
#include <stdlib.h>
#include <stdexcept>
#include <memory>
#include <algorithm>
#include "./scoped_array.h"

/**
 * @class Array
 * @brief Implements a vector that resizes.
 */
template <typename T>
class Array {
 public:
  // Define a "trait"
  typedef T value_type;

  // = Initialization and termination methods.

  // Dynamically create an uninitialized array.  Throws <std::bad_alloc>
  // if allocation fails.
  explicit Array(size_t size);

  // Dynamically initialize the entire array to the <default_value>.
  // Throws <std::bad_alloc> if allocation fails.
  Array(size_t size, const T &default_value);

  // The copy constructor performs initialization by making an exact
  // copy of the contents of parameter <s>, i.e., *this == s will
  // return true.  Throws <std::bad_alloc> if allocation fails.
  Array(const Array<T> &s);

  // Assignment operator performs an assignment by making a copy of
  // the contents of parameter <s>, i.e., *this == s will return true.
  Array<T> &operator= (const Array<T> &s);

  // Clean up the array (e.g., delete dynamically allocated memory).
  ~Array(void);

  // = Set/get methods.

  // Set an item in the array at location index.  If <index> >=
  // <s.cur_size_> then <resize()> the array so it's big enough.
  // Throws <std::bad_alloc> if resizing the array fails.
  void set(const T &new_item, size_t index);

  // Get an item in the array at location index.  Throws <std::out_of_range>
  // of index is not <in_range>.
  void get(T &item, size_t index) const;

  // Returns the <cur_size_> of the array.
  size_t size(void) const;

  // Returns a reference to the <index> element in the <Array> without
  // checking for range errors.
  const T &operator[] (size_t index) const;

  // Set an item in the array at location index without
  // checking for range errors.
  T &operator[] (size_t index);

  // Compare this array with <s> for equality.  Returns true if the
  // size()'s of the two arrays are equal and all the elements from 0
  // .. size() are equal, else false.
  bool operator== (const Array<T> &s) const;

  // Compare this array with <s> for inequality such that <*this> !=
  // <s> is always the complement of the boolean return value of
  // <*this> == <s>.
  bool operator!= (const Array<T> &s) const;

  // Change the size of the array to be at least <new_size> elements.
  // Throws <std::bad_alloc> if allocation fails.
  void resize(size_t new_size);

  // Efficiently swap the contents of this array with <new_array>.
  // Does not throw an exception.
  void swap(Array<T> &new_array);

 private:
  // Returns true if <index> is within range, i.e., 0 <= <index> <
  // <cur_size_>, else returns false.
  bool in_range(size_t index) const;

  // Maximum size of the array, i.e., the total number of <T> elements
  // in <array_>.
  size_t max_size_;

  // Current size of the array.  This starts out being == to
  // <max_size_>.  However, if we are assigned a smaller array, then
  // <cur_size_> will become less than <max_size_>.  The purpose of
  // keeping track of both sizes is to avoid reallocating memory if we
  // don't have to.
  size_t cur_size_;

  // If a default value is needed, keep track of its value.
  // Make a copy of the default value passed in. So we don't use
  // the original value.
  std::unique_ptr<T> default_value_;

  // Pointer to the array's storage buffer.
  scoped_array<T> array_;
};

#if defined (__INLINE__)
#define INLINE inline
#include "Array.inl"
#endif /* __INLINE__ */

#include "Array.cpp"

#endif /* ARRAY_H */

#+end_src

#+begin_src C++ :tangle Array.inl

/***************************************
Class: CS251
Assignment Number: 2
Honor Pledge: I pledge that I have not recieved nor given help on this assignment.
***************************************/

// Returns the current size of the array.

template <typename T> INLINE size_t 
Array<T>::size (void) const {
  return cur_size_;
}

template <typename T> INLINE bool
Array<T>::in_range (size_t index) const {
  return index <= max_size_ - 1 && index >= 0;
}

template <typename T> INLINE T &
Array<T>::operator[] (size_t index) {
  return array_[index];
}

template <typename T> INLINE const T &
Array<T>::operator[] (size_t index) const {
  return array_[index];
}

#+end_src

#+begin_src C++ :tangle scoped_array.h

/* -*- C++ -*- */

#ifndef _SCOPED_ARRAY
#define _SCOPED_ARRAY

#include <cstddef>

// scoped_array extends auto_ptr to arrays. Deletion of the array
// pointed to is guaranteed, either on destruction of the scoped_array
// or via an explicit reset().  This implementation is based on the
// boost scoped_array class. 

template <typename T> 
class scoped_array 
{
public:
  typedef T value_type;

  // Stash the array pointer away for later use.

  explicit scoped_array (T *p = 0) : ptr_ (p) // never throws
  {
  }

  // Delete the array pointer.

  ~scoped_array () // never throws
  {
    delete [] this->ptr_;
  }

  // Releases ownership of the underlying pointer. Returns that pointer.

  T *release (void) 
  {
    T *old = this->ptr_;
    this->ptr_ = 0;
    return old;
  }

  // Requires that p points to an object of class T or a class derived
  // from T for which delete p is defined and accessible, or p is a
  // null pointer. Deletes the current underlying pointer, then resets
  // it to p.

  void reset (T *p = 0) // never throws
  {
    this_type (p).swap (*this);
  }

  // Return the subscript into the array.

  T &operator[](size_t i) const // never throws
  {
    return this->ptr_[i];
  }

  // Return the underlying pointer to the array.

  T *get() const // never throws
  {
    return this->ptr_;
  }

  // Implicit conversion to "bool"
  bool operator! () const // never throws
  {
    return this->ptr_ == 0;
  }

  // Swap the contents of this scoped array with <b>.

  void swap (scoped_array<T> &b) // never throws
  {
    T *tmp = b.ptr_;
    b.ptr_ = this->ptr_;
    this->ptr_ = tmp;
  }

  // Swap the contents of pointer <b> with <ptr_>.

  void swap (T *&b) // never throws
  {
    T *tmp = b;
    b = this->ptr_;
    this->ptr_ = tmp;
  }

private:
  T *ptr_;

  // Disallow copying
  scoped_array (const scoped_array<T> &);
  scoped_array &operator=(const scoped_array<T> &);

  typedef scoped_array<T> this_type;
};

#endif /* _SCOPED_ARRAY_H */

#+end_src

* Implementation

#+begin_src C++ :tangle Array.cpp

/***************************************
Class: CS251
Assignment Number: 2
Honor Pledge: I pledge that I have not recieved nor given help on this assignment.
***************************************/

#ifndef ARRAY_CPP
#define ARRAY_CPP

#include <sys/types.h>
#include "./Array.h"

#if !defined (__INLINE__)
#define INLINE
#include "./Array.inl"
#endif /* __INLINE__ */

#include <algorithm>
#include <sstream>

/**
 * Dynamically creates an uninitialized array.
 */
template <typename T>
Array<T>::Array(size_t size) :
    max_size_(size),
    cur_size_(size),
    default_value_(nullptr),
    array_(new T[size]) {}

/**
 * Dynamically creates an uninitialized array to the <default_value>.
 */
template <typename T>
Array<T>::Array(size_t size, const T &default_value) :
    max_size_(size),
    cur_size_(size),
    default_value_(new T(default_value)),
    array_(new T[size]) {
  std::fill(array_.get(), array_.get() + size, *default_value_);
}


/**
 * The copy constructor (performs initialization).
 */
template <typename T>
Array<T>::Array(const Array<T> &s):
    max_size_(s.max_size_),
    cur_size_(s.cur_size_),
    array_(new T[s.max_size_]) {
  std::copy(s.array_.get(), s.array_.get() + s.cur_size_, array_.get());
}

/**
 * Changes the size of the array to be at least <new_size> elements.
 */
template <typename T>
void Array<T>::resize(size_t new_size) {
  if (new_size > max_size_) {
    Array<T> temp(new_size);
    std::copy(array_.get(), array_.get() + cur_size_, temp.array_.get());
    swap(temp);
  }
}

/**
 * Efficiently swap the contents of this array with <new_array>.
 * Does not throw an exception.
 */
template <typename T>
void Array<T>::swap(Array<T> &new_array) {
  std::swap(cur_size_, new_array.cur_size_);
  std::swap(max_size_, new_array.cur_size_);
  array_.swap(new_array.array_);
}

/**
 * Assignment operator (performs assignment).
 */
template <typename T>
Array<T>& Array<T>::operator=(const Array<T> &s) {
  if (this != &s) {
    if (s.size() > max_size_) {
      Array<T> temp(s);
      swap(temp);
    } else {
      std::copy(s.array_.get(), s.array_.get() + s.size(), array_.get());
      cur_size_ = s.size();
    }
  }
  return *this;
}


/**
 * Clean up the array (e.g., delete dynamically allocated memory).
 * In this case there is nothing to do cause we are using smart pointer
 * and scoped_array
 */
template <typename T>
Array<T>::~Array(void) {
  // no-op
}

// = Set/get methods.

// Set an item in the array at location index.

template <typename T>
void Array<T>::set(const T &new_item, size_t index) {
  if (!in_range(index)) {
    resize(index + 1);
  }
  array_[index] = new_item;
}

// Get an item in the array at location index.

template <typename T>
void Array<T>::get(T &item, size_t index) const {
  if (in_range(index)) {
    item = array_[index];
  } else {
    throw std::out_of_range("out of range");
  }
}

/**
 **  Compare this array with <s> for equality.
 */
template <typename T>
bool Array<T>::operator==(const Array<T> &s) const {
  if (this == &s) {
    return true;
  } else {
    return std::equal(array_.get(), array_.get() + cur_size_, s.array_.get());
  }
}

// Compare this array with <s> for inequality.

template <typename T>
bool Array<T>::operator!= (const Array<T> &s) const {
  return !(s == *this);
}

#endif /* ARRAY_CPP */

#+end_src

* Test

#+begin_src C++ :tangle main.cpp

// Uses a Array to reverse a name and test various properties of class
// Array<>.

#include <assert.h>
#include <stdexcept>
#include <iostream>
#include <cstdio>
#include <string>
#include "Array.h"

static const int INITIAL_NAME_LEN = 1;

typedef Array<char> ARRAY;

void testDefaults()
{
  ARRAY a1 (10, 'a');
  ARRAY a2 (20, 'b');
  ARRAY a3 (30, 'c');

  size_t i = 0;

  std::cout << "\n-----Entering default value tests-----\n\n";

  std::cout << "Testing defaults for a1 with defaults a (10)\n\n";

  for (i = 0; i < a1.size (); i++)
  {
    std::cout << a1[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting defaults for a2 with defaults b (20)\n\n";

  for (i = 0; i < a2.size (); i++)
  {
    std::cout << a2[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting defaults for a3 with defaults c (30)\n\n";

  for (i = 0; i < a3.size (); i++)
  {
    std::cout << a3[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  a1.set ('d',19);
  a2.set ('e',29);
  a3.set ('f',39);

  std::cout << "\n-----Performing resize tests via set-----\n\n";

  std::cout << "Testing defaults for a1 with defaults a (set 19=d) (20)\n";
  std::cout << "As per assignment details, the last 9 out of 10 characters may be\n";
  std::cout << "random characters. The important part is whether or not the\n";
  std::cout << "20th character is a 'd'.\n\n";

  for (i = 0; i < a1.size (); i++)
  {
    std::cout << a1[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting defaults for a2 with defaults b (set 29=e) (30)\n";
  std::cout << "As per assignment details, the last 9 out of 10 characters may be\n";
  std::cout << "random characters. The important part is whether or not the\n";
  std::cout << "30th character is an 'e'.\n\n";

  for (i = 0; i < a2.size (); i++)
  {
    std::cout << a2[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting defaults for a3 with defaults c (set 39=f) (40)\n";
  std::cout << "As per assignment details, the last 9 out of 10 characters may be\n";
  std::cout << "random characters. The important part is whether or not the\n";
  std::cout << "40th character is a 'f'.\n\n";

  for (i = 0; i < a3.size (); i++)
  {
    std::cout << a3[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\n----- Default values have been tested. Please review results.-----\n\n";

  std::cout << "Press any key to continue\n\n";
  getchar ();

}

void testAssignmentsAndConstructors()
{
  ARRAY a1 (10, 'a');
  ARRAY a2 (20, 'b');
  ARRAY a3 (30, 'c');
  ARRAY c1 (1, 'x');
  ARRAY c2 (1, 'y');
  ARRAY c3 (1, 'z');
  ARRAY c4 (30);
  ARRAY c5 (c4);

  size_t i = 0;

  std::cout << "\n\n-----Performing copy constructor tests-----\n\n";

  ARRAY b1(a1);
  ARRAY b2(a2);
  ARRAY b3(a3);

  std::cout << "\nTesting b1(a1). a1 contained 10 a's.\n\n";

  for (i = 0; i < b1.size (); i++)
  {
    std::cout << b1[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting b2(a2). a2 contained 20 b's.\n\n";

  for (i = 0; i < b2.size (); i++)
  {
    std::cout << b2[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting b3(a3). b3 contained 30 c's.\n\n";

  for (i = 0; i < b3.size (); i++)
  {
    std::cout << b3[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\n\n-----Performing assignment operator tests-----\n\n";

  c1 = a1;
  c2 = a2;
  c3 = a3;

  std::cout << "\nTesting c1 = a1. c1 should contain 10 a's.\n\n";

  for (i = 0; i < c1.size (); i++)
  {
    std::cout << c1[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting c2 = a2. c2 should contain 20 b's.\n\n";

  for (i = 0; i < c2.size (); i++)
  {
    std::cout << c2[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\nTesting c3 = a3. c3 should contain 30 c's.\n\n";

  for (i = 0; i < c3.size (); i++)
  {
    std::cout << c3[i] << ' ';
    if (i % 10 == 9) std::cout << std::endl;
  }

  std::cout << "\n----- Assignments/constructors" <<
  " have been tested. Please review results.-----\n\n";


  std::cout << "Press any key to continue\n\n";
  getchar ();
}

void
testSwap (void)
{
  ARRAY a1(10, 'a');
  ARRAY a2(10, 'b');
  ARRAY a3(10, 'a');
  ARRAY a4(10, 'b');

  assert (a1 == a3);
  assert (a2 == a4);
  a1.swap (a2);
  assert (a1 == a4);
  assert (a2 == a3);
}

int
main (int argc, char *argv[])
{
  try
  {
    testDefaults();
    testAssignmentsAndConstructors();
    testSwap ();

    std::string name;
    const ARRAY::value_type DEFAULT_VALUE = 'D';

    ARRAY a1 (INITIAL_NAME_LEN, DEFAULT_VALUE);
    size_t i;
    assert (a1.size () == INITIAL_NAME_LEN);

    std::cout << "please enter your name..: ";
    std::getline (std::cin, name);

    assert (a1.size () == 1);
    std::cout << "size is " << a1.size () << std::endl
    << "read in: " << name.length () << std::endl;

    for (i = 0; i < name.length (); i++)
      // Note that this call should trigger a resize () whenever i exceeds a1.size().
      a1.set(name[i], i);

    // Test to make sure that a1.size () is assigned properly after
    // the series of set() calls.
    assert (a1.size () == name.length ());

    std::cout << "size is " << a1.size () << std::endl << "your name is..: ";

    for (i = 0; i < a1.size (); i++)
      std::cout << a1[i];

    // Test initialization with the copy constructor.
    ARRAY a2 (a1);
    ARRAY a3 (a1.size () + a2.size (), -1);

    // Test the assignment operator.
    a1 = a2;
    assert (a1.size () == a2.size ());
    assert (a1 == a2);
    assert (!(a1 != a2));

    a2 = a3;
    assert (a1.size () != a2.size ());
    assert (a1 != a2);

    // Test for self assignment.
    a3 = a3;

    // Checking for error in assignment/equality operator when
    // copying cur_size - 1 chars instead of cur_size.
    ARRAY a4 (name.length ());

    for (i = 0; i < name.length (); i++)
      a4.set (name[i], i);

    ARRAY a5 (INITIAL_NAME_LEN, DEFAULT_VALUE);
    a5 = a4;

    assert (a4 == a5);

    a4 [name.length () - 1] = 'x';
    assert (! (a4 == a5));

    std::cout << "your name backwards is..: ";

    // Note that we're "off by one here" so we'll get a range error.
    for (int j = name.length (); j >= 0; j--)
    {
      ARRAY::value_type c;

      a1.get (c, j - 1);
      std::cout << c;
    }

    std::cout << "\n";
  }
  catch (std::out_of_range &e)
  {
    std::cout.flush();
    std::cerr << std::endl << "index " << e.what () << " out of range" << std::endl;
  }
  catch (std::bad_alloc &)
  {
    std::cout.flush();
    std::cerr << "new failed" << std::endl;
  }

  return 0;
}

#if defined (__GNUC__) || defined (_MSC_VER)
template class Array<char>;
#endif /* __GNUC__ || _MSC_VER */

#+end_src

#+RESULTS:
p: rm -rf *.o *.tex *.cpp *.h *.inl makefile _minted-assignment1

* Makefile
#+begin_src makefile :tangle makefile
all: Array.o main.o

main.o: Array.o main.cpp
	g++ -std=c++11 main.cpp Array.o -o main.o

Array.o: Array.h Array.inl Array.cpp scoped_array.h
	g++ -c -std=c++11 Array.cpp -o Array.o
clean:
	rm -rf *.o *.tex *.cpp *.h *.inl makefile _minted-assignment2
#+end_src

* How to run
** Compile and Build
Extract all the source code into files and compile and build the executable.
#+BEGIN_SRC emacs-lisp :exports none
;; tangle the source code
(org-babel-tangle)
;; export to pdf
(org-latex-export-to-pdf)
;; build
(shell-command-to-string "make")
#+END_SRC

#+RESULTS:
: g++ -c -std=c++11 Array.cpp -o Array.o
: g++ -std=c++11 main.cpp Array.o -o main.o

** Run
Run the project.
#+begin_src emacs-lisp :exports none
(shell-command-to-string "./main.o")
#+end_src

** Clean
Keeps only the org file.
#+begin_src emacs-lisp :exports none
(shell-command-to-string "make clean")
#+end_src

#+RESULTS:
: rm -rf *.o *.tex *.cpp *.h *.inl makefile _minted-assignment2

